/* Problem 8: Largest Product in a Series
Find the greatest product of five consecutive digits in the 1000-digit number.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
*/

import java.io.*;
import java.util.*;

public class Problem8 {
	public static void main(String[] args) {
		long startTime = System.currentTimeMillis();

		String hugeNumber = new String("731671765313306249192251196744265747423553491949349698352031277450632623" 
			+ "9578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386" 
			+ "3050715693290963295227443043557668966489504452445231617318564030987111217223831136222989342338030"
			+ "8135336276614282806444486645238749303589072962904915604407723907138105158593079608667017242712188" 
			+ "3998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771"
			+ "1670556013604839586446706324415722155397536978179778461740649551492908625693219784686224828397224"
			+ "1375657056057490261407972968652414535100474821663704844031998900088952434506585412275886668811642"
			+ "7171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422"
			+ "4219022671055626321111109370544217506941658960408071984038509624554443629812309878799272442849091"
			+ "8884580156166097919133875499200524063689912560717606058861164671094050775410022569831552000559357"
			+ "2972571636269561882670428252483600823257530420752963450"); // Split for nothing other than clarity in reading
		int product = 0;
		int max = 0;

		for (int i = 0; i < hugeNumber.length() - 4; i++) {
			product = multiply(hugeNumber,i);
			if (product > max)
				max = product;
		}
		System.out.println(max);

		long endTime = System.currentTimeMillis();
		long totalTime = endTime - startTime;
		System.out.println("Total run time was " + totalTime + " milliseconds.");
	}

	public static int multiply(String number, int start) {
		int result = Integer.parseInt(number.substring(start,start+1))*Integer.parseInt(number.substring(start+1,start+2))*Integer.parseInt(number.substring(start+2,start+3))*Integer.parseInt(
			number.substring(start+3,start+4))*Integer.parseInt(number.substring(start+4,start+5)); // Sloppy, but for this small implementation, is effective
		return result;	
	}
}